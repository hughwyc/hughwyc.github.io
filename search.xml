<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>掠过湖面的微风</title>
    <url>/posts/special-things-in-life/</url>
    <content><![CDATA[<p>读文章时，看电视剧时，亦或是与人闲谈时，偶尔会有那么几个让我脑海中荡起波纹的时刻。好似在沉睡中被人叫醒，又似肖申克监狱的扬声器里传出意大利歌曲。</p>
<h4 id="1-越是舒服的时候，可能越危险"><a href="#1-越是舒服的时候，可能越危险" class="headerlink" title="1. 越是舒服的时候，可能越危险"></a>1. 越是舒服的时候，可能越危险</h4><div align=center><img src="https://user-images.githubusercontent.com/61838645/76237525-67283d80-6269-11ea-9443-ddbb7c19f366.png" width="60%" height="60%"></div>

<h4 id="2-虚拟世界中的畅游，在现实世界一文不值"><a href="#2-虚拟世界中的畅游，在现实世界一文不值" class="headerlink" title="2. 虚拟世界中的畅游，在现实世界一文不值"></a>2. 虚拟世界中的畅游，在现实世界一文不值</h4><div align=center><img src="https://github.com/hughwyc/figure-asset/blob/master/figures/20200310.jpg?raw=true" width="60%" height="60%"></div>]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>special</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用学习</title>
    <url>/posts/github-study/</url>
    <content><![CDATA[<blockquote>
<p><strong><font color=#499ae0>注：以后听视频课，一定要同时做笔记</font></strong></p>
</blockquote>
<h2 id="一、常用Linix语句"><a href="#一、常用Linix语句" class="headerlink" title="一、常用Linix语句"></a>一、常用Linix语句</h2><ol>
<li><code>ls</code> –&gt; 查看目录中的文件</li>
<li><code>pwd</code> –&gt; 显示当前工作路径</li>
<li><code>mkdir [文件名]</code> –&gt; 新建一个文件夹</li>
<li><code>git config --global user.name &#39;[用户名]&#39;</code> –&gt; 设置用户名</li>
<li><code>git config --global user.email &#39;[邮箱地址]&#39;</code> –&gt; 设置用户邮箱</li>
<li><code>git config --list</code> –&gt; 查看设置</li>
<li><code>git init</code> –&gt; 初始化一个仓库（生成一个<code>.git</code>文件夹，用于存储本地仓库的信息）</li>
<li><code>touch [文件名]</code> –&gt; 新建一个文件</li>
<li><code>vim [文件名]</code> –&gt; 进入vim编辑器进行修改文件</li>
<li>在vim编辑器中，按下<code>i</code>进入输入模式，按下<code>esc</code>键退出输入模式，输入<code>:wq</code>或<code>:x</code>可进行保存并退出（或按下快捷键<code>shift + z z</code>）</li>
<li><code>cat [文件名]</code>  –&gt; 从第一个字节开始正向查看文件的内容 </li>
<li><code>git status</code> –&gt; 查看当前所有文件的状况（所在的位置，是工作区还是暂存区）</li>
<li><code>git diff</code> –&gt; 对比查看工作区被跟踪的文件的修改详情（ 只有在版本区中存在的文件才是被跟踪文件 ）</li>
<li><code>git add [文件名]</code> –&gt; 把文件从工作区添加到暂存区</li>
<li><code>git reset -- [文件名]</code>  –&gt; 撤回暂存区中对某文件的修改（若不写文件名，则全部撤回）</li>
<li><code>git rm [文件名]</code> –&gt; 从暂存区中删除文件</li>
<li><code>git commit -m &#39;[提交描述]&#39;</code> –&gt; 把文件从暂存区提交到本地仓库</li>
<li><code>git push</code> –&gt; 将文件从本地仓库同步到Github</li>
<li><code>rm -f file1</code> 删除一个叫做 ‘file1′ 的文件’ </li>
<li><code>rm -rf dir1</code> 删除一个叫做 ‘dir1’ 的目录并同时删除其子文件</li>
<li><code>git clone [仓库地址]</code>  –&gt; 将远程仓库复制到本地</li>
<li><code>git log</code> –&gt; 查看版本区(本地仓库)的历史提交记录（倒序）<br><code>git log --reverse</code>    –&gt;  查看时间正序排列的历史提交信记录<br><code>git log [分支名]</code>   –&gt; 查看某分支的提交历史，不写分支名查看当前所在分支<br><code>git log --oneline</code>   –&gt; 一行显示提交历史<br><code>git log -n</code>   –&gt; 其中 n 是数字，查看最近 n 个提交<br><code>git log --author [贡献者名字]</code>   –&gt; 查看指定贡献者的提交记录<br><code>git log --graph  --&gt;</code> 图示法显示提交历史</li>
<li><code>git reflog</code> –&gt; 查看所有版本记录（可用于历史记录回滚）</li>
<li><code>git reset --hard [历史版本号]</code> –&gt; 回滚到历史某一个版本</li>
<li><code>git branch</code> –&gt;  查看本地全部分支信息；<br><code>git branch -r</code> –&gt; 查看远程所有分支；<br><code>git branch -a</code> –&gt; 查看本地和远程所有分支（仅显示分支名）<br><code>git branch -v</code> –&gt; 显示本地分支名、版本号、本地分支与远程分支的提交同步状态、最新的提交信息<br><code>git branch -vv</code> –&gt; 比上一个多显示出远程分支名</li>
</ol>
<div align=center><img src="https://user-images.githubusercontent.com/61838645/76209358-aee4a000-623c-11ea-939f-72d933cd487f.png" width="100%" height="100%"></div>

<p>运行后有三行信息，依次说明:</p>
<ul>
<li><p>第一行，开头的星号表示<strong>当前所在本地分支</strong>，绿色的 master 是分支名，之所以是绿色，也是因为它是当前所在分支。后面第二项是版本号，第三项中括号里面蓝色的字，表示此分支跟踪的远程分支的名字，当然啦，这也是克隆远程仓库到本地时的默认设置 – 创建 master 分支并自动跟踪远程同名分支；冒号后面的 ahead 1 表示<strong>本地分支<font color=#499ae0>领先</font></strong>其跟踪的<strong>远程分支</strong>一个提交。最后一项是提交时填写的备注信息。</p>
</li>
<li><p>第二行，是 Git 指针信息，它指向远程仓库的 master 分支，这行信息暂不重要。</p>
</li>
<li><p>第三行，远程分支信息，详见第一行的解释。（remote分支名、版本号、提交信息）</p>
<p><font color=#499ae0><strong>PS：</strong></font> github中README.md关联图片的图片地址是有一定的格式的，其格式如下：<br><code>https://github.com/用户名/repository仓库名/raw/分支名master/图片文件夹名称/.png or.jpg</code></p>
</li>
</ul>
<ol start="26">
<li><code>git reset --soft HEAD^</code> –&gt; 撤销最近的一次提交，将修改还原到暂存区。<code>--soft</code> 表示软退回，对应的还有 <code>--hard</code> 硬退回，后面会讲到，<code>HEAD^</code> 表示撤销一次提交，<code>HEAD^^</code> 表示撤销两次提交，撤销 n 次可以简写为 <code>HEAD~n</code>。</li>
<li><code>git remote -v</code> –&gt;  查看当前远程的版本 </li>
<li><code>git fetch origin master</code> –&gt; 从远程的origin仓库的master分支下载代码到本地的origin master </li>
<li><code>git pull origin</code> –&gt; </li>
<li><code>git merge origin master</code> –&gt; </li>
<li><code>git merge --abort</code> –&gt; Undo a merge</li>
<li><code>git push origin</code> –&gt; </li>
</ol>
<p><strong><font color=#499ae0>注：<code>git fetch</code>、<code>git merge</code>、<code>git pull</code> 三者之间的区别与联系</font></strong></p>
<ul>
<li><code>git fetch</code> and <code>git pull</code>  both are used to <strong>download</strong> new data from a remote repository. </li>
<li><code>git fetch</code> really only downloads new data from a remote repository - but it doesn’t integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository. </li>
<li><code>git pull</code>, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. This means that pull not only downloads new data; it also directly <strong>integrates</strong> it into your current working copy files. This has a couple of consequences:<ul>
<li>Since <code>git pull</code> tries to merge remote changes with your local ones, a so-called “merge conflict” can occur.  </li>
<li>Like for many other actions, it’s highly recommended to start a <code>git pull</code> only with a clean working copy. This means that you should <em>not</em> have any uncommitted local changes before you pull.</li>
</ul>
</li>
<li>Dealing with “Merge Conflicts”. </li>
</ul>
<h2 id="二、Git初始化及仓库创建和操作"><a href="#二、Git初始化及仓库创建和操作" class="headerlink" title="二、Git初始化及仓库创建和操作"></a>二、Git初始化及仓库创建和操作</h2><ol>
<li>基本信息设置 （用户名+邮箱）</li>
<li>初始化一个新的Git仓库</li>
</ol>
<h2 id="三、向仓库中添加文件"><a href="#三、向仓库中添加文件" class="headerlink" title="三、向仓库中添加文件"></a>三、向仓库中添加文件</h2><ol>
<li>新建文件</li>
<li>将文件从工作区添加到暂存区</li>
<li>将文件从暂存区提交到仓库</li>
</ol>
<h2 id="四、删除文件"><a href="#四、删除文件" class="headerlink" title="四、删除文件"></a>四、删除文件</h2><ol>
<li>删除文件：<code>rm -rf [文件名]</code></li>
<li>删除暂存区中的文件：<code>git rm [文件名]</code></li>
<li>将删除动作提交到本地仓库：<code>git coommit -m &#39;[描述]&#39;</code></li>
</ol>
<h2 id="五、从远程仓库获取最新代码合并到本地分支"><a href="#五、从远程仓库获取最新代码合并到本地分支" class="headerlink" title="五、从远程仓库获取最新代码合并到本地分支"></a>五、从远程仓库获取最新代码合并到本地分支</h2><p>这里共展示两类三种方式。（参考自<a href="https://blog.csdn.net/hanchao5272/article/details/79162130" target="_blank" rel="noopener">hanchao5272</a>）</p>
<h3 id="1-git-pull：获取最新代码到本地，并自动合并到当前分支"><a href="#1-git-pull：获取最新代码到本地，并自动合并到当前分支" class="headerlink" title="1.git pull：获取最新代码到本地，并自动合并到当前分支"></a>1.git pull：获取最新代码到本地，并自动合并到当前分支</h3><p>命令展示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">//直接拉取并合并最新代码</span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master [示例1：拉取远端origin/master分支并合并到当前分支]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin dev [示例2：拉取远端origin/dev分支并合并到当前分支]</span></span><br></pre></td></tr></table></figure>

<p>分析：不推荐这种方式，因为是直接合并，无法提前处理冲突。</p>
<h3 id="2-git-fetch-merge-获取最新代码到本地，然后手动合并分支"><a href="#2-git-fetch-merge-获取最新代码到本地，然后手动合并分支" class="headerlink" title="2.git fetch + merge: 获取最新代码到本地，然后手动合并分支"></a>2.git fetch + merge: 获取最新代码到本地，然后手动合并分支</h3><h4 id="2-1-额外建立本地分支"><a href="#2-1-额外建立本地分支" class="headerlink" title="2.1.额外建立本地分支"></a>2.1.额外建立本地分支</h4><p>代码展示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//查看当前远程的版本</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v </span></span><br><span class="line">//获取最新代码到本地临时分支(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin master:master1  [示例1：在本地建立master1分支，并下载远端的origin/master分支到master1分支中]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin dev:dev1[示例1：在本地建立dev1分支，并下载远端的origin/dev分支到dev1分支中]</span></span><br><span class="line">//查看版本差异</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff master1 [示例1：查看本地master1分支与当前分支的版本差异]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff dev1    [示例2：查看本地dev1分支与当前分支的版本差异]</span></span><br><span class="line">//合并最新分支到本地分支</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge master1    [示例1：合并本地分支master1到当前分支]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev1   [示例2：合并本地分支dev1到当前分支]</span></span><br><span class="line">//删除本地临时分支</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -D master1    [示例1：删除本地分支master1]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -D dev1 [示例1：删除本地分支dev1]</span></span><br></pre></td></tr></table></figure>

<p>备注：不推荐这种方式，还需要额外对临时分支进行处理。</p>
<h4 id="2-2-不额外建立本地分支"><a href="#2-2-不额外建立本地分支" class="headerlink" title="2.2.不额外建立本地分支"></a>2.2.不额外建立本地分支</h4><p>代码展示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">//获取最新代码到本地(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin master  [示例1：获取远端的origin/master分支]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin dev [示例2：获取远端的origin/dev分支]</span></span><br><span class="line">//查看版本差异</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p master..origin/master [示例1：查看本地master与远端origin/master的版本差异]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p dev..origin/dev   [示例2：查看本地dev与远端origin/dev的版本差异]</span></span><br><span class="line">//合并最新代码到本地分支</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/master  [示例1：合并远端分支origin/master到当前分支]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/dev [示例2：合并远端分支origin/dev到当前分支]</span></span><br></pre></td></tr></table></figure>

<p>备注：推荐这种方式</p>
<h2 id="六、把本地仓库信息提交到远程仓库"><a href="#六、把本地仓库信息提交到远程仓库" class="headerlink" title="六、把本地仓库信息提交到远程仓库"></a>六、把本地仓库信息提交到远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 建立本地仓库和远程仓库的连接</span><br><span class="line">// 查看本地仓库与哪些远程仓库有连接</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">// 让本地仓库与远程仓库新建一个连接（origin是随便起的一个连接名，一般使用这个）</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin [Git远程仓库地址]</span></span><br><span class="line">// 关闭连接</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote rm origin</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//提交之前最好先拉取(origin:连接名；master:主分支)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master</span></span><br><span class="line">//把本地代码提交到远程仓库</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [远程Git仓库地址] [别名(可不设置，默认为仓库名)]</span></span><br><span class="line">//真实项目开发流程：</span><br><span class="line">1. 组长或负责人先创建中央仓库（增加协作者）</span><br><span class="line">2. 小组成员基于git clone，把远程仓库及其默认内容克隆到本地一份。</span><br><span class="line">3. 每个组员写完自己的程序后，基于"git add ./git commit -m 'info'/git push",提交自己的代码。</span><br></pre></td></tr></table></figure>

<ul>
<li><code>git clone</code>解决了三件事：<ul>
<li>初始化一个本地仓库 <code>git init</code></li>
<li>与远程仓库保持关联 <code>git remote add</code></li>
<li>把远程仓库默认内容拉取到本地 <code>git pull</code></li>
</ul>
</li>
</ul>
<h2 id="七、Github-Pages-搭建网站"><a href="#七、Github-Pages-搭建网站" class="headerlink" title="七、Github Pages 搭建网站"></a>七、Github Pages 搭建网站</h2><h3 id="1-个人站点"><a href="#1-个人站点" class="headerlink" title="1. 个人站点"></a>1. 个人站点</h3><p>访问：https://用户名.github.io</p>
<h3 id="2-搭建步骤"><a href="#2-搭建步骤" class="headerlink" title="2. 搭建步骤"></a>2. 搭建步骤</h3><ol>
<li>创建个人站点 –&gt; 新建仓库（注：仓库名必须是【用户名.github.io】）</li>
<li>在仓库下新建index.html的文件，即可。</li>
</ol>
<h3 id="附：参考搭建教程"><a href="#附：参考搭建教程" class="headerlink" title="附：参考搭建教程"></a>附：参考搭建教程</h3><ol>
<li><a href="https://www.cxyxiaowu.com/6407.html" target="_blank" rel="noopener">超全面！如何用 GitHub 从零开始搭建一个博客 ？</a></li>
<li><a href="https://hasaik.com/posts/ab21860c.html" target="_blank" rel="noopener">Hexo博客+Next主题深度优化与定制</a></li>
<li><a href="lyxf.live/posts/2063/">hexo-Next主题美化</a></li>
<li><a href="www.cduyzh.com/hexo-settings-3/">基于hexo博客自定义页面样式</a></li>
<li><a href="https://blog.csdn.net/baidu_34310405/article/details/102665373" target="_blank" rel="noopener">Hexo Next主题添加访客统计</a></li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>经济学原理-上</title>
    <url>/posts/principle-of-economics-1/</url>
    <content><![CDATA[<h1 id="第1章-经济学十大原理"><a href="#第1章-经济学十大原理" class="headerlink" title="第1章 经济学十大原理"></a>第1章 经济学十大原理</h1><blockquote>
<p><strong>稀缺性</strong> (scarcity) 是指社会拥有的资源是有限的，因此不能生产人们希望拥有的所有物品与服务。</p>
<p><strong>经济学</strong> (economics) 研究社会如何管理自己的稀缺资源，研究人们如何做出决策。</p>
</blockquote>
<h2 id="1-1-人们如何做出决策"><a href="#1-1-人们如何做出决策" class="headerlink" title="1.1 人们如何做出决策"></a>1.1 人们如何做出决策</h2><h3 id="1-1-1-原理一：人们面临权衡取舍"><a href="#1-1-1-原理一：人们面临权衡取舍" class="headerlink" title="1.1.1 原理一：人们面临权衡取舍"></a>1.1.1 原理一：人们面临权衡取舍</h3><ul>
<li><p><font color=#499ae0>一个人最宝贵的资源，是<strong>时间</strong>。</font></p>
</li>
<li><p>要求企业减少污染，好处是更清洁的环境和健康水平的提高，代价是企业所有者、工人和消费者的收入减少了。（企业成本高–利润低–工人工资低–商品价格高）</p>
</li>
</ul>
<blockquote>
<p><strong>效率</strong>（efficiency）是指社会能从其稀缺资源中得到最大利益。</p>
<p><strong>平等</strong>（equality）是指将这些利益平均地分配给社会成员。</p>
</blockquote>
<ul>
<li>效率与平等之间的权衡取舍：当政府把富人的收入再分配给穷人时，就减少了辛勤工作的奖励；结果是人们工作少了，生产的物品和服务也少了。（当政府想把经济蛋糕切为更均等的小份时，这块蛋糕本身变小了。）</li>
</ul>
<h3 id="1-1-2-原理二：某种东西的成本是为了得到它所放弃的东西"><a href="#1-1-2-原理二：某种东西的成本是为了得到它所放弃的东西" class="headerlink" title="1.1.2 原理二：某种东西的成本是为了得到它所放弃的东西"></a>1.1.2 原理二：某种东西的成本是为了得到它所放弃的东西</h3><blockquote>
<p><strong>机会成本</strong>（opportunity cost）是为了得到这种东西所放弃的东西。</p>
</blockquote>
<ul>
<li>当做出任何一项决策时，决策者应该认识到每一种可能的行动所带来的机会成本。</li>
</ul>
<h3 id="1-1-3-原理三：理性人考虑边际量"><a href="#1-1-3-原理三：理性人考虑边际量" class="headerlink" title="1.1.3 原理三：理性人考虑边际量"></a>1.1.3 原理三：理性人考虑边际量</h3><blockquote>
<p><strong>理性人</strong>（rational people）系统而有目的地尽最大努力去实现其目标。</p>
<p><strong>边际变动</strong>（marginal change）是指对现有行动计划的微小增量调整。</p>
</blockquote>
<ul>
<li>理性人通常通过比较边际收益（marginal benefit）与边际成本（marginal cost）来做决策。</li>
<li>边际成本，即<u>在原本固定套餐的基础上</u>，多打一次电话的成本；</li>
<li>边际收益，即多打一次电话的收益。</li>
</ul>
<h3 id="1-1-4-原理四：人们会对激励做出反应"><a href="#1-1-4-原理四：人们会对激励做出反应" class="headerlink" title="1.1.4 原理四：人们会对激励做出反应"></a>1.1.4 原理四：人们会对激励做出反应</h3><blockquote>
<p><strong>激励</strong>（incentive）是引起一个人做出某种行为的某种东西（如惩罚或奖励的预期）</p>
</blockquote>
<ul>
<li>整个经济学的内容可以简单地概括为：“人们会对激励做出反应。其余内容都是对此地解释。”</li>
<li>如果政策改变了激励，那就会使人们改变自己的行为。</li>
<li>汽油税鼓励人们开小型的节油型汽车。汽油税越高，会有更多的人驾驶混合动力型汽车，如果更高，人们就会开始驾驶电动汽车。</li>
</ul>
<h2 id="1-2-人们如何相互影响"><a href="#1-2-人们如何相互影响" class="headerlink" title="1.2 人们如何相互影响"></a>1.2 人们如何相互影响</h2><h3 id="1-2-1-原理五：贸易可以使每个人的状况都变得更好"><a href="#1-2-1-原理五：贸易可以使每个人的状况都变得更好" class="headerlink" title="1.2.1 原理五：贸易可以使每个人的状况都变得更好"></a>1.2.1 原理五：贸易可以使每个人的状况都变得更好</h3><ul>
<li>通过与他人进行进行贸易，每个人可以从事自己最擅长的活动，可以以较低成本获得各种各样的物品与服务。</li>
</ul>
<h3 id="1-2-2-原理六：市场通常是组织经济活动的一种好方法"><a href="#1-2-2-原理六：市场通常是组织经济活动的一种好方法" class="headerlink" title="1.2..2 原理六：市场通常是组织经济活动的一种好方法"></a>1.2..2 原理六：市场通常是组织经济活动的一种好方法</h3><blockquote>
<p><strong>市场经济</strong>（market economy）是指当许多企业和家庭在物品与服务市场上相互交易时，通过他们的分散决策配置资源的经济。</p>
</blockquote>
<ul>
<li>看不见的手通过价格机制、供求机制、竞争机制来自动调节人们的行为以使社会福利最大化。</li>
<li>我们每天所需的食物和饮料，不是出自屠户、酿酒师或面包师的恩惠，而是出自他们利己的打算。</li>
<li>每一个人，既不打算促进公共的利益，也不知道自己是在何种程度上促进那种利益，他所盘算的只是他自己的利益。</li>
</ul>
<h3 id="1-2-3-原理七：政府有时可以改善市场结果"><a href="#1-2-3-原理七：政府有时可以改善市场结果" class="headerlink" title="1.2.3 原理七：政府有时可以改善市场结果"></a>1.2.3 原理七：政府有时可以改善市场结果</h3><blockquote>
<p><strong>产权</strong>（property rights）是指个人拥有并控制稀缺资源的能力。</p>
</blockquote>
<ul>
<li>政府的作用：赋予个人产权；促进效率或促进平等。</li>
</ul>
<blockquote>
<p><strong>市场失灵</strong>（market failure）指市场本身不能有效配置资源的情况。</p>
<p><strong>外部性</strong>（externality）是一个人的行为对旁观者福利的影响。（污染）</p>
<p><strong>市场势力</strong>（market power）指单个经济活动者（或某个经济活动小群体）对市场价格有显著影响的能力。（垄断）</p>
</blockquote>
<ul>
<li>在正常情况下，价格是通过竞争来约束个人的利己行为。</li>
</ul>
<h2 id="1-3-整体经济如何运行"><a href="#1-3-整体经济如何运行" class="headerlink" title="1.3 整体经济如何运行"></a>1.3 整体经济如何运行</h2><h3 id="1-3-1-原理八：一国的生活水平取决于它生产物品与服务的能力"><a href="#1-3-1-原理八：一国的生活水平取决于它生产物品与服务的能力" class="headerlink" title="1.3.1 原理八：一国的生活水平取决于它生产物品与服务的能力"></a>1.3.1 原理八：一国的生活水平取决于它生产物品与服务的能力</h3><blockquote>
<p><strong>生产率</strong>（productivity）是指每单位劳动投入所生产的物品与服务的数量</p>
</blockquote>
<h3 id="1-3-2-原理九：当政府发行了过多货币时，物价上涨"><a href="#1-3-2-原理九：当政府发行了过多货币时，物价上涨" class="headerlink" title="1.3.2 原理九：当政府发行了过多货币时，物价上涨"></a>1.3.2 原理九：当政府发行了过多货币时，物价上涨</h3><blockquote>
<p><strong>通货膨胀</strong>（inflation）指经济中物价总水平的上升。</p>
</blockquote>
<ul>
<li>通货膨胀的罪魁祸首时货币量的增长。</li>
</ul>
<h3 id="1-3-3-原理十：社会面临通货膨胀与失业之间的短期权衡取舍"><a href="#1-3-3-原理十：社会面临通货膨胀与失业之间的短期权衡取舍" class="headerlink" title="1.3.3 原理十：社会面临通货膨胀与失业之间的短期权衡取舍"></a>1.3.3 原理十：社会面临通货膨胀与失业之间的短期权衡取舍</h3><ul>
<li>经济中货币量的增加，刺激了社会的整体支出水平，从而增加了对物品与服务的需求。</li>
<li>需求的增加随着时间的推移，会引起企业提高物价，但同时，它也鼓励企业雇佣更多的工人，并生产更多的物品与服务。</li>
<li>雇佣更多的工人意味着更少的失业。</li>
</ul>
<blockquote>
<p><strong>经济周期</strong>（business cycle）是指就业和生产等经济活动的波动。</p>
</blockquote>
<ul>
<li>现代经济学中关于经济周期的论述一般是指经济增长率上升和下降的交替过程，而不是经济总量的增加和减少。一个完整的经济周期包括繁荣、衰退、萧条、复苏四个阶段。衡量经济周期处于什么阶段主要依据国民生产总值、工业生产指数、就业和收入、价格指数、利息率等综合经济活动指标的波动。</li>
<li>破窗谬论：一个无业青年拿一块砖头打碎了面包店的窗户。有人说：“好可恶”，另有人说：“这是一件好事。面包师傅会拿钱请维修工来修窗户，增加了维修工的收入，而维修工又可以把收入作为支出来增加其他人的收入。如此一来，只要窗户足够大，还能促进社会繁荣哩。”</li>
<li>其实破窗并没有创造新的活动，而只是创造了不同的活动。人们看到发生了的活动，但他们没有看到本来会发生的活动。</li>
</ul>
]]></content>
      <categories>
        <category>economy</category>
      </categories>
      <tags>
        <tag>economy</tag>
      </tags>
  </entry>
  <entry>
    <title>My first post</title>
    <url>/posts/my-first-blog/</url>
    <content><![CDATA[<p>开学时间仍是未定。在这史无前例的漫长假期中，得益于丰富的网络资源，即使宅在家里，也可以尝试许多<a href="https://www.cxyxiaowu.com/6407.html" target="_blank" rel="noopener">有趣的东西</a>。</p>
<p>一天，同样的24小时，选择不同，收获却有天壤之别。时至今日，我已然在这世上走过了近24年，准确地说，是8690个日子。朱自清先生在同我这年龄时也有过相似的感叹吧。在搭博客找主题模板的过程中，我瞥见了一些大咖们的人生轨迹，自叹不如。回望过去的自己，仿佛鸟儿在天空飞过，虽不曾留下痕迹，不过也算是拍过翅膀了罢。</p>
<p>尝试过一些东西，大体知道了有几样是自己不大喜欢的。前方岔路颇多，如今伫立在这里想，我最终能“绘”出怎样的人生轨迹？可惜这笔中的墨被盖住了，不晓得还剩多少。不过从别人那里知道总共也就大概80年的样子。呵，我竟用去三分之一了呢！</p>
<p>这笔打一生下来就由时间舞动着，不停地涂涂画画，未曾停歇。哪怕我在休息的时候，也被推着画出一小段直线。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
